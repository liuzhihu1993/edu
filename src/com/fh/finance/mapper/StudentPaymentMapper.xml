<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fh.finance.mapper.StudentPaymentMapper">
	<resultMap id="BaseResultMap" type="com.fh.po.StudentPayment">
		<id column="payment_id" property="paymentId" jdbcType="INTEGER" />
		<result column="student_id" property="studentId" jdbcType="INTEGER" />
		<result column="staff_id" property="staffId" jdbcType="INTEGER" />
		<result column="payment_situation" property="paymentSituation"
			jdbcType="VARCHAR" />
		<result column="payment_method" property="paymentMethod"
			jdbcType="INTEGER" />
		<result column="payment_time" property="paymentTime" jdbcType="TIMESTAMP" />
		<result column="discount_amount" property="discountAmount"
			jdbcType="DOUBLE" />
		<result column="should_amount" property="shouldAmount"
			jdbcType="DOUBLE" />
		<result column="real_amount" property="realAmount" jdbcType="DOUBLE" />
		<result column="debt_amount" property="debtAmount" jdbcType="DOUBLE" />
		<result column="payment_remark" property="paymentRemark"
			jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		payment_id, student_id, staff_id, payment_situation,
		payment_method,
		payment_time,
		discount_amount, should_amount,
		real_amount, debt_amount, payment_remark
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from student_payment
		where payment_id = #{paymentId,jdbcType=INTEGER}
	</select>
	<select id="getStudentPaymentList" resultMap="BaseResultMap"
		parameterType="com.fh.po.StudentPayment">
		select
		<include refid="Base_Column_List" />
		from student_payment
		<where>
			<if test="studentId!=null">
				and student_id=#{studentId}
			</if>
		</where>
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		student_payment
		where payment_id = #{paymentId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.fh.po.StudentPayment">
		insert into student_payment
		(payment_id, student_id, staff_id,
		payment_situation, payment_method,
		payment_time,
		discount_amount, should_amount, real_amount,
		debt_amount,
		payment_remark)
		values (#{paymentId,jdbcType=INTEGER},
		#{studentId,jdbcType=INTEGER},
		#{staffId,jdbcType=INTEGER},
		#{paymentSituation,jdbcType=VARCHAR},
		#{paymentMethod,jdbcType=INTEGER}, #{paymentTime,jdbcType=TIMESTAMP},
		#{discountAmount,jdbcType=DOUBLE}, #{shouldAmount,jdbcType=DOUBLE},
		#{realAmount,jdbcType=DOUBLE},
		#{debtAmount,jdbcType=DOUBLE},
		#{paymentRemark,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.fh.po.StudentPayment">
		insert into student_payment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="paymentId != null">
				payment_id,
			</if>
			<if test="studentId != null">
				student_id,
			</if>
			<if test="staffId != null">
				staff_id,
			</if>
			<if test="paymentSituation != null">
				payment_situation,
			</if>
			<if test="paymentMethod != null">
				payment_method,
			</if>
			<if test="paymentTime != null">
				payment_time,
			</if>
			<if test="discountAmount != null">
				discount_amount,
			</if>
			<if test="shouldAmount != null">
				should_amount,
			</if>
			<if test="realAmount != null">
				real_amount,
			</if>
			<if test="debtAmount != null">
				debt_amount,
			</if>
			<if test="paymentRemark != null">
				payment_remark,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="paymentId != null">
				#{paymentId,jdbcType=INTEGER},
			</if>
			<if test="studentId != null">
				#{studentId,jdbcType=INTEGER},
			</if>
			<if test="staffId != null">
				#{staffId,jdbcType=INTEGER},
			</if>
			<if test="paymentSituation != null">
				#{paymentSituation,jdbcType=VARCHAR},
			</if>
			<if test="paymentMethod != null">
				#{paymentMethod,jdbcType=INTEGER},
			</if>
			<if test="paymentTime != null">
				#{paymentTime,jdbcType=TIMESTAMP},
			</if>
			<if test="discountAmount != null">
				#{discountAmount,jdbcType=DOUBLE},
			</if>
			<if test="shouldAmount != null">
				#{shouldAmount,jdbcType=DOUBLE},
			</if>
			<if test="realAmount != null">
				#{realAmount,jdbcType=DOUBLE},
			</if>
			<if test="debtAmount != null">
				#{debtAmount,jdbcType=DOUBLE},
			</if>
			<if test="paymentRemark != null">
				#{paymentRemark,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.fh.po.StudentPayment">
		update student_payment
		<set>
			<if test="studentId != null">
				student_id = #{studentId,jdbcType=INTEGER},
			</if>
			<if test="staffId != null">
				staff_id = #{staffId,jdbcType=INTEGER},
			</if>
			<if test="paymentSituation != null">
				payment_situation = #{paymentSituation,jdbcType=VARCHAR},
			</if>
			<if test="paymentMethod != null">
				payment_method = #{paymentMethod,jdbcType=INTEGER},
			</if>
			<if test="paymentTime != null">
				payment_time = #{paymentTime,jdbcType=TIMESTAMP},
			</if>
			<if test="discountAmount != null">
				discount_amount = #{discountAmount,jdbcType=DOUBLE},
			</if>
			<if test="shouldAmount != null">
				should_amount = #{shouldAmount,jdbcType=DOUBLE},
			</if>
			<if test="realAmount != null">
				real_amount = #{realAmount,jdbcType=DOUBLE},
			</if>
			<if test="debtAmount != null">
				debt_amount = #{debtAmount,jdbcType=DOUBLE},
			</if>
			<if test="paymentRemark != null">
				payment_remark = #{paymentRemark,jdbcType=VARCHAR},
			</if>
		</set>
		where payment_id = #{paymentId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.fh.po.StudentPayment">
		update
		student_payment
		set student_id = #{studentId,jdbcType=INTEGER},
		staff_id = #{staffId,jdbcType=INTEGER},
		payment_situation =
		#{paymentSituation,jdbcType=VARCHAR},
		payment_method =
		#{paymentMethod,jdbcType=INTEGER},
		payment_time =
		#{paymentTime,jdbcType=TIMESTAMP},
		discount_amount =
		#{discountAmount,jdbcType=DOUBLE},
		should_amount =
		#{shouldAmount,jdbcType=DOUBLE},
		real_amount =
		#{realAmount,jdbcType=DOUBLE},
		debt_amount =
		#{debtAmount,jdbcType=DOUBLE},
		payment_remark =
		#{paymentRemark,jdbcType=VARCHAR}
		where payment_id =
		#{paymentId,jdbcType=INTEGER}
	</update>
</mapper>